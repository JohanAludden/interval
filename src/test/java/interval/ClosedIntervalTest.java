package interval;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Before;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.core.Is.is;
import static org.junit.Assert.assertThat;

public class ClosedIntervalTest {

    private Interval interval;

    @Before
    public void setUp() {
        interval = ClosedInterval.createClosedInterval(1, 3);
    }

    @Test
    public void testCreateClosedInterval() {
        assertThat(interval.getLowerEndpoint(), is(1));
        assertThat(interval.getUpperEndpoint(), is(3));
    }

    @Test
    public void testContainsValueBetweenLowerAndUpperEndpoints() {
        assertThat(interval.contains(2), is(true));
    }

    @Test
    public void testContainsValueEqualToLowerEndpoint() {
        assertThat(interval.contains(1), is(true));
    }

    @Test
    public void testContainsValueEqualToUpperEndpoint() {
        assertThat(interval.contains(3), is(true));
    }

    @Test
    public void testDoesNotContainValueLessThenLowerEndpoint() {
        assertThat(interval.contains(0), is(false));
    }

    @Test
    public void testDoesNotContainValueGreaterThenUpperEndpoint() {
        assertThat(interval.contains(4), is(false));
    }

    @Test
    public void testToString() {
        assertThat(interval.toString(), is("[1-3]"));
    }

    @Test
    public void testEqualsAndHashCode() {
        Interval a = ClosedInterval.createClosedInterval(1, 3);
        Interval b = ClosedInterval.createClosedInterval(1, 3);
        Interval c = ClosedInterval.createClosedInterval(1, 4);
        Interval d = ClosedInterval.createClosedInterval(0, 3);

        assertThat(a, is(b));
        assertThat(b, is(a));
        assertThat(a, is(not(c)));
        assertThat(a, is(not(d)));
        assertThat(a.equals(null), is(false));

        assertThat(a.hashCode(), is(b.hashCode()));
    }
}
